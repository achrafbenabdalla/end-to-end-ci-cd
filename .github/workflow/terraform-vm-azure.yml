name: "Terraform Pipeline Provision Azure"

on:
  push:
    branches: ['master', 'main']
  pull_request:
    branches: ['master', 'main']

permissions:
  contents: write

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Azure credentials for deployment
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_CLOUD_ORGANIZATION: "prodxcloud"
  TF_WORKSPACE: "prodxcloud"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  CONFIG_DIRECTORY: "./deployments/terraform/terraform-azure-vm-tf/terraform/"

jobs:
  terraform:
    name: "Terraform Pipeline Provision Azure with TF Cloud"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deployments/terraform/terraform-azure-vm-tf/terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specific version
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform init
        id: init
        run: terraform init -lock=false

      - name: Terraform format
        id: fmt
        run: terraform fmt

      - name: Terraform validate
        id: validate
        run: terraform validate
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
          TFE_TOKEN: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -lock=false

    # Uncomment this step if you need to destroy resources after provisioning
    # - name: Terraform Destroy All Resources
    #   run: terraform destroy -auto-approve -input=false -lock=false
